{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"git-changelog \u00a4 Automatic Changelog generator using Jinja2 templates. From git logs to change logs. Features \u00a4 Jinja2 templates! You get full control over the rendering. Built-in Keep a Changelog and Angular templates (also see Conventional Changelog ). Commit styles/conventions parsing. Built-in Angular , Atom and basic styles. Git service/provider agnostic, plus references parsing (issues, commits, etc.). Built-in GitHub and Gitlab support. Understands Semantic Versioning : major/minor/patch for versions and commits. Guesses next version based on last commits. Todo: Plugin architecture , to support more commit styles and git services. Template context injection , to furthermore customize how your changelog will be rendered. Easy access to \"Breaking Changes\" in the templates. Update changelog in-place , paired with commits/dates/versions range limitation ability . Requirements \u00a4 git-changelog requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8 Installation \u00a4 With pip : python3.6 -m pip install git-changelog With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 git-changelog Usage (command-line) \u00a4 usage: git-changelog [-h] [-o OUTPUT] [-s {angular,atom,basic}] [-t {angular,keepachangelog}] [-v] REPOSITORY Command line tool for git-changelog Python package. positional arguments: REPOSITORY The repository path, relative or absolute. optional arguments: -h, --help Show this help message and exit. -o OUTPUT, --output OUTPUT Output to given file. Default: stdout. -s {angular,atom,basic}, --style {angular,atom,basic} The commit style to match against. -t {angular,keepachangelog}, --template {angular,keepachangelog} The Jinja2 template to use. Prefix with \"path:\" to specify the path to a directory containing a file named \"changelog.md\". -v, --version Show the current version of the program and exit.","title":"Overview"},{"location":"#git-changelog","text":"Automatic Changelog generator using Jinja2 templates. From git logs to change logs.","title":"git-changelog"},{"location":"#features","text":"Jinja2 templates! You get full control over the rendering. Built-in Keep a Changelog and Angular templates (also see Conventional Changelog ). Commit styles/conventions parsing. Built-in Angular , Atom and basic styles. Git service/provider agnostic, plus references parsing (issues, commits, etc.). Built-in GitHub and Gitlab support. Understands Semantic Versioning : major/minor/patch for versions and commits. Guesses next version based on last commits. Todo: Plugin architecture , to support more commit styles and git services. Template context injection , to furthermore customize how your changelog will be rendered. Easy access to \"Breaking Changes\" in the templates. Update changelog in-place , paired with commits/dates/versions range limitation ability .","title":"Features"},{"location":"#requirements","text":"git-changelog requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install git-changelog With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 git-changelog","title":"Installation"},{"location":"#usage-command-line","text":"usage: git-changelog [-h] [-o OUTPUT] [-s {angular,atom,basic}] [-t {angular,keepachangelog}] [-v] REPOSITORY Command line tool for git-changelog Python package. positional arguments: REPOSITORY The repository path, relative or absolute. optional arguments: -h, --help Show this help message and exit. -o OUTPUT, --output OUTPUT Output to given file. Default: stdout. -s {angular,atom,basic}, --style {angular,atom,basic} The commit style to match against. -t {angular,keepachangelog}, --template {angular,keepachangelog} The Jinja2 template to use. Prefix with \"path:\" to specify the path to a directory containing a file named \"changelog.md\". -v, --version Show the current version of the program and exit.","title":"Usage (command-line)"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v0.4.0 - 2020-05-21 \u00a4 Compare with v0.3.0 Bug Fixes \u00a4 Use actual url for references ( 46a8790 by Timoth\u00e9e Mazzucotelli). Use style subject if possible ( 7f2c3ad by Timoth\u00e9e Mazzucotelli). Correctly handle nested subgroups for gitlab repos ( 8ca990b by Timoth\u00e9e Mazzucotelli). Fix bumping versions starting with \"v\" ( 44e7644 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Move styles into new commit module to avoid cyclic dependencies ( d90bd15 by Timoth\u00e9e Mazzucotelli). Features \u00a4 Improve changelog rendering ( e9dd3f4 by Timoth\u00e9e Mazzucotelli). Use today's date for current version Move \"compare\" link below the heading (better table of contents in documentation) Improve \"compare\" links to handle first and current version Use selected commit types to render sections Add default commit types to render variable ( 173392a by Timoth\u00e9e Mazzucotelli). Always use today's date for unreleased version ( 1c34fa8 by Timoth\u00e9e Mazzucotelli). v0.3.0 - 2020-03-31 \u00a4 Compare with v0.2.0 Bug Fixes \u00a4 Fix is_minor method for version ( 6d08978 by Lo\u00efc Viennois). Fix parse_refs method for ProviderRefParser ( dc51589 by Lo\u00efc Viennois). Correctly detect major version, for both angular style and basic style ( 7385e19 by Lo\u00efc Viennois). Code Refactoring \u00a4 Add type hints to all classes and methods ( 95276ef by Lo\u00efc Viennois). Features \u00a4 Update template keepachangelog ( ce76ed6 ) by RainChen: Capitalize commit subject Show author name for each commit Sort commits by date Unique commit subjects 0.2.0 - 2019-11-24 \u00a4 Compare with 0.1.1 Drop support for Python < 3.6. Use poetry to manage the project! Fixed \u00a4 Fix detection of feature (is_minor) for angular style ( 4fbf0ee ). 0.1.1 - 2018-06-27 \u00a4 Compare with 0.1.0 Fixed \u00a4 Fix build with MANIFEST.in, add license file ( 013fb69 ). Misc \u00a4 Improve readability ( 5e590f6 ). 0.1.0 - 2018-06-27 \u00a4 Compare with first commit Added \u00a4 Add github/github regexes ( 584fd73 ). Fixed \u00a4 Fix patch bump ( 8470e69 ). Fix refs parsing ( 8c77cb7 ). Misc \u00a4 Continue packaging (#6) ( a29af2c ). Finish packaging (#6) ( e92b492 ). Implement reference parsing ( a9b4a89 ). Improve angular template, improve style/refs system ( 5b87d48 ). Initial commit ( 83845fe ). Package code (#6) ( 1219eaf ). Update changelog for version 0.1.0 ( 14edcaf ). Update changelog for version 0.1.0 ( 610633d ). Update changelog for version 0.1.0 ( 2eaaa2e ). Work in progress ( 27a60e8 ).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#v040-2020-05-21","text":"Compare with v0.3.0","title":"v0.4.0 - 2020-05-21"},{"location":"changelog/#bug-fixes","text":"Use actual url for references ( 46a8790 by Timoth\u00e9e Mazzucotelli). Use style subject if possible ( 7f2c3ad by Timoth\u00e9e Mazzucotelli). Correctly handle nested subgroups for gitlab repos ( 8ca990b by Timoth\u00e9e Mazzucotelli). Fix bumping versions starting with \"v\" ( 44e7644 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Move styles into new commit module to avoid cyclic dependencies ( d90bd15 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features","text":"Improve changelog rendering ( e9dd3f4 by Timoth\u00e9e Mazzucotelli). Use today's date for current version Move \"compare\" link below the heading (better table of contents in documentation) Improve \"compare\" links to handle first and current version Use selected commit types to render sections Add default commit types to render variable ( 173392a by Timoth\u00e9e Mazzucotelli). Always use today's date for unreleased version ( 1c34fa8 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#v030-2020-03-31","text":"Compare with v0.2.0","title":"v0.3.0 - 2020-03-31"},{"location":"changelog/#bug-fixes_1","text":"Fix is_minor method for version ( 6d08978 by Lo\u00efc Viennois). Fix parse_refs method for ProviderRefParser ( dc51589 by Lo\u00efc Viennois). Correctly detect major version, for both angular style and basic style ( 7385e19 by Lo\u00efc Viennois).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_1","text":"Add type hints to all classes and methods ( 95276ef by Lo\u00efc Viennois).","title":"Code Refactoring"},{"location":"changelog/#features_1","text":"Update template keepachangelog ( ce76ed6 ) by RainChen: Capitalize commit subject Show author name for each commit Sort commits by date Unique commit subjects","title":"Features"},{"location":"changelog/#020-2019-11-24","text":"Compare with 0.1.1 Drop support for Python < 3.6. Use poetry to manage the project!","title":"0.2.0 - 2019-11-24"},{"location":"changelog/#fixed","text":"Fix detection of feature (is_minor) for angular style ( 4fbf0ee ).","title":"Fixed"},{"location":"changelog/#011-2018-06-27","text":"Compare with 0.1.0","title":"0.1.1 - 2018-06-27"},{"location":"changelog/#fixed_1","text":"Fix build with MANIFEST.in, add license file ( 013fb69 ).","title":"Fixed"},{"location":"changelog/#misc","text":"Improve readability ( 5e590f6 ).","title":"Misc"},{"location":"changelog/#010-2018-06-27","text":"Compare with first commit","title":"0.1.0 - 2018-06-27"},{"location":"changelog/#added","text":"Add github/github regexes ( 584fd73 ).","title":"Added"},{"location":"changelog/#fixed_2","text":"Fix patch bump ( 8470e69 ). Fix refs parsing ( 8c77cb7 ).","title":"Fixed"},{"location":"changelog/#misc_1","text":"Continue packaging (#6) ( a29af2c ). Finish packaging (#6) ( e92b492 ). Implement reference parsing ( a9b4a89 ). Improve angular template, improve style/refs system ( 5b87d48 ). Initial commit ( 83845fe ). Package code (#6) ( 1219eaf ). Update changelog for version 0.1.0 ( 14edcaf ). Update changelog for version 0.1.0 ( 610633d ). Update changelog for version 0.1.0 ( 2eaaa2e ). Work in progress ( 27a60e8 ).","title":"Misc"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd git-changelog make setup That's it! You now have the dependencies installed. You can run the application with poetry run git-changelog [ARGS...] . Run make help to see all the available actions! Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd git-changelog make setup That's it! You now have the dependencies installed. You can run the application with poetry run git-changelog [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build git-changelog . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 bandit | black | coverage | failprint | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | toml Indirect dependencies \u00a4 ansimarkup | apipkg | appdirs | appnope | atomicwrites | attrs | backcall | beautifulsoup4 | certifi | chardet | click | colorama | decorator | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build git-changelog . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"bandit | black | coverage | failprint | flake8 | flake8-bandit | flake8-black | flake8-builtins | flake8-comprehensions | flake8-docstrings | flake8-isort | flake8-tidy-imports | flake8-variables-names | ipython | isort | Jinja2 | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-sugar | pytest-xdist | requests | toml","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | apipkg | appdirs | appnope | atomicwrites | attrs | backcall | beautifulsoup4 | certifi | chardet | click | colorama | decorator | execnet | flake8-polyfill | future | gitdb | GitPython | idna | importlib-metadata | ipython-genutils | jedi | joblib | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | more-itertools | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | six | smmap | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. Templates \u00a4 Helper to pick a template on the command line. get_parser () \u00a4 Return the CLI argument parser. Source code in git_changelog/cli.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_parser (): \"\"\"Return the CLI argument parser.\"\"\" parser = argparse . ArgumentParser ( add_help = False , prog = \"git-changelog\" , description = \"Command line tool for git-changelog Python package.\" ) parser . add_argument ( \"repository\" , metavar = \"REPOSITORY\" , help = \"The repository path, relative or absolute.\" ) parser . add_argument ( \"-h\" , \"--help\" , action = \"help\" , default = argparse . SUPPRESS , help = \"Show this help message and exit.\" ) parser . add_argument ( \"-o\" , \"--output\" , action = \"store\" , dest = \"output\" , default = sys . stdout , help = \"Output to given file. Default: stdout.\" , ) parser . add_argument ( \"-s\" , \"--style\" , choices = STYLES , default = \"basic\" , dest = \"style\" , help = \"The commit style to match against.\" ) parser . add_argument ( \"-t\" , \"--template\" , choices = Templates (( \"angular\" , \"keepachangelog\" )), default = \"keepachangelog\" , dest = \"template\" , help = 'The Jinja2 template to use. Prefix with \"path:\" to specify the path ' 'to a directory containing a file named \"changelog.md\".' , ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = \"git-changelog 0.1.0\" , help = \"Show the current version of the program and exit.\" , ) return parser main ( args = None ) \u00a4 The main function, which is executed when you section_type git-changelog or python -m git_changelog . Source code in git_changelog/cli.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def main ( args = None ): \"\"\"The main function, which is executed when you section_type `git-changelog` or `python -m git_changelog`.\"\"\" parser = get_parser () args = parser . parse_args ( args = args ) # get template if args . template . startswith ( \"path:\" ): path = args . template . replace ( \"path:\" , \"\" , 1 ) try : template = templates . get_custom_template ( path ) except FileNotFoundError : print ( \"git-changelog: no such directory, \" \"or missing changelog.md: %s \" % path , file = sys . stderr ) return 1 else : template = templates . get_template ( args . template ) # build data changelog = Changelog ( args . repository , style = args . style ) # get rendered contents rendered = template . render ( changelog = changelog ) # write result in specified output if args . output is sys . stdout : sys . stdout . write ( rendered ) else : with open ( args . output , \"w\" ) as stream : stream . write ( rendered ) return 0","title":"cli.py"},{"location":"reference/cli/#git_changelog.cli","text":"Module that contains the command line application.","title":"git_changelog.cli"},{"location":"reference/cli/#git_changelog.cli.Templates","text":"Helper to pick a template on the command line.","title":"Templates"},{"location":"reference/cli/#git_changelog.cli.get_parser","text":"Return the CLI argument parser. Source code in git_changelog/cli.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_parser (): \"\"\"Return the CLI argument parser.\"\"\" parser = argparse . ArgumentParser ( add_help = False , prog = \"git-changelog\" , description = \"Command line tool for git-changelog Python package.\" ) parser . add_argument ( \"repository\" , metavar = \"REPOSITORY\" , help = \"The repository path, relative or absolute.\" ) parser . add_argument ( \"-h\" , \"--help\" , action = \"help\" , default = argparse . SUPPRESS , help = \"Show this help message and exit.\" ) parser . add_argument ( \"-o\" , \"--output\" , action = \"store\" , dest = \"output\" , default = sys . stdout , help = \"Output to given file. Default: stdout.\" , ) parser . add_argument ( \"-s\" , \"--style\" , choices = STYLES , default = \"basic\" , dest = \"style\" , help = \"The commit style to match against.\" ) parser . add_argument ( \"-t\" , \"--template\" , choices = Templates (( \"angular\" , \"keepachangelog\" )), default = \"keepachangelog\" , dest = \"template\" , help = 'The Jinja2 template to use. Prefix with \"path:\" to specify the path ' 'to a directory containing a file named \"changelog.md\".' , ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = \"git-changelog 0.1.0\" , help = \"Show the current version of the program and exit.\" , ) return parser","title":"get_parser()"},{"location":"reference/cli/#git_changelog.cli.main","text":"The main function, which is executed when you section_type git-changelog or python -m git_changelog . Source code in git_changelog/cli.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 def main ( args = None ): \"\"\"The main function, which is executed when you section_type `git-changelog` or `python -m git_changelog`.\"\"\" parser = get_parser () args = parser . parse_args ( args = args ) # get template if args . template . startswith ( \"path:\" ): path = args . template . replace ( \"path:\" , \"\" , 1 ) try : template = templates . get_custom_template ( path ) except FileNotFoundError : print ( \"git-changelog: no such directory, \" \"or missing changelog.md: %s \" % path , file = sys . stderr ) return 1 else : template = templates . get_template ( args . template ) # build data changelog = Changelog ( args . repository , style = args . style ) # get rendered contents rendered = template . render ( changelog = changelog ) # write result in specified output if args . output is sys . stdout : sys . stdout . write ( rendered ) else : with open ( args . output , \"w\" ) as stream : stream . write ( rendered ) return 0","title":"main()"}]}